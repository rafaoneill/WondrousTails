// <auto-generated />
using System;
using AetherCurrents.Database.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AetherCurrents.Database.Migrations
{
    [DbContext(typeof(AetherCurrentsContext))]
    partial class AetherCurrentsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AetherCurrents.Database.Entities.Achievement", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("Category");

                    b.Property<int>("DataI");

                    b.Property<int>("DataIi")
                        .HasColumnName("DataII");

                    b.Property<int>("DataIii")
                        .HasColumnName("DataIII");

                    b.Property<int>("DataIv")
                        .HasColumnName("DataIV");

                    b.Property<int>("DataIx")
                        .HasColumnName("DataIX");

                    b.Property<int>("DataV");

                    b.Property<int>("DataVi")
                        .HasColumnName("DataVI");

                    b.Property<int>("DataVii")
                        .HasColumnName("DataVII");

                    b.Property<int>("DataViii")
                        .HasColumnName("DataVIII");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("Icon")
                        .HasMaxLength(50);

                    b.Property<string>("Item")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(55);

                    b.Property<short>("Order");

                    b.Property<byte>("Points");

                    b.Property<short?>("Title");

                    b.Property<byte>("Type");

                    b.HasKey("Id");

                    b.ToTable("Achievement");
                });

            modelBuilder.Entity("AetherCurrents.Database.Entities.AchievementCategory", b =>
                {
                    b.Property<int>("Id");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsSeasonal");

                    b.Property<int>("Kind");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("AchievementCategory");
                });

            modelBuilder.Entity("AetherCurrents.Database.Entities.AchievementKind", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.HasKey("Id");

                    b.ToTable("AchievementKind");
                });

            modelBuilder.Entity("AetherCurrents.Database.Entities.Action", b =>
                {
                    b.Property<int>("Id");

                    b.Property<bool?>("AffectsPosition");

                    b.Property<byte?>("Aspect");

                    b.Property<byte?>("AttackType");

                    b.Property<bool?>("CanTargetArea");

                    b.Property<bool?>("CanTargetDead");

                    b.Property<bool?>("CanTargetFriendly");

                    b.Property<bool?>("CanTargetHostile");

                    b.Property<bool?>("CanTargetParty");

                    b.Property<bool?>("CanTargetSelf");

                    b.Property<short?>("Cast");

                    b.Property<byte?>("CastType");

                    b.Property<byte?>("Category");

                    b.Property<byte?>("ClassJob");

                    b.Property<byte?>("ClassJobCategory");

                    b.Property<int?>("ClassJobLevel");

                    b.Property<short?>("Combo");

                    b.Property<byte?>("CooldownGroup");

                    b.Property<int?>("Cost");

                    b.Property<byte?>("CostType");

                    b.Property<int?>("Data");

                    b.Property<byte?>("EffectRange");

                    b.Property<string>("Icon")
                        .HasMaxLength(25);

                    b.Property<bool?>("IsPvP");

                    b.Property<bool?>("IsRoleAction");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<byte?>("Omen");

                    b.Property<bool?>("PreservesCombo");

                    b.Property<byte?>("ProcStatus");

                    b.Property<int?>("Range");

                    b.Property<short?>("Recast");

                    b.Property<short?>("StatusGainSelf");

                    b.Property<short?>("TimelineHit");

                    b.Property<short?>("TimelineUse");

                    b.Property<byte?>("XaxisModifier")
                        .HasColumnName("XAxisModifier");

                    b.HasKey("Id");

                    b.ToTable("Action");
                });

            modelBuilder.Entity("AetherCurrents.Database.Entities.ActionCategory", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("ActionCategory");
                });

            modelBuilder.Entity("AetherCurrents.Database.Entities.ActionComboRoute", b =>
                {
                    b.Property<int>("Id");

                    b.Property<short>("Action0");

                    b.Property<short>("Action1");

                    b.Property<short>("Action2");

                    b.Property<short>("Action3");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("ActionComboRoute");
                });

            modelBuilder.Entity("AetherCurrents.Database.Entities.ActionComboRouteTransient", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1500);

                    b.HasKey("Id");

                    b.ToTable("ActionComboRouteTransient");
                });

            modelBuilder.Entity("AetherCurrents.Database.Entities.FishingSpot", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("BigFishOnEnd")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("BigFishOnReach")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<byte>("FishingSpotCategory");

                    b.Property<byte>("GatheringLevel");

                    b.Property<short>("PlaceName");

                    b.Property<short>("Radius");

                    b.Property<short>("TerritoryType");

                    b.Property<short>("X");

                    b.Property<short>("Z");

                    b.HasKey("Id");

                    b.ToTable("FishingSpot");
                });

            modelBuilder.Entity("AetherCurrents.Database.Entities.FishingSpotItem", b =>
                {
                    b.Property<int>("FishingSpotId");

                    b.Property<int>("Sequence");

                    b.Property<int>("Item");

                    b.HasKey("FishingSpotId", "Sequence");

                    b.ToTable("FishingSpotItem");
                });

            modelBuilder.Entity("AetherCurrents.Database.Entities.FishParameter", b =>
                {
                    b.Property<int>("Id");

                    b.Property<short>("GatheringItemLevel");

                    b.Property<short>("GatheringSubCategory");

                    b.Property<bool>("IsFish");

                    b.Property<int>("Item");

                    b.Property<int>("TerritoryType");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("FishParameter");
                });

            modelBuilder.Entity("AetherCurrents.Database.Entities.GatheringType", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("IconMain")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("IconOff")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("GatheringType");
                });

            modelBuilder.Entity("AetherCurrents.Database.Entities.Item", b =>
                {
                    b.Property<int>("Id");

                    b.Property<short>("AetherialReduce");

                    b.Property<byte>("BaseParamModifier");

                    b.Property<short>("Block");

                    b.Property<short>("BlockRate");

                    b.Property<bool>("CanBeHq");

                    b.Property<byte>("ClassJobCategory");

                    b.Property<byte>("ClassJobRepair");

                    b.Property<byte>("ClassJobUse");

                    b.Property<short>("CooldownSeconds");

                    b.Property<short>("DamageMagical");

                    b.Property<short>("DamagePhysical");

                    b.Property<short>("DefenseMagical");

                    b.Property<short>("DefensePhysical");

                    b.Property<short>("DelayMiliseconds");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1200)
                        .IsUnicode(false);

                    b.Property<byte>("EquipRestriction");

                    b.Property<byte>("EquipSlotCategory");

                    b.Property<byte>("FilterGroup");

                    b.Property<byte>("GrandCompany");

                    b.Property<string>("Icon")
                        .HasMaxLength(25);

                    b.Property<bool>("IsAdvancedMeldingPermitted");

                    b.Property<bool>("IsCollectable");

                    b.Property<bool>("IsCrestWorthy");

                    b.Property<bool>("IsDyeable");

                    b.Property<bool>("IsIndisposable");

                    b.Property<bool>("IsPvp");

                    b.Property<bool>("IsUnique");

                    b.Property<bool>("IsUntradable");

                    b.Property<short>("ItemAction");

                    b.Property<int>("ItemGlamour");

                    b.Property<int>("ItemRepair");

                    b.Property<byte>("ItemSearchCategory");

                    b.Property<byte>("ItemSeries");

                    b.Property<byte>("ItemSpecialBonus");

                    b.Property<byte>("ItemSpecialBonusParam");

                    b.Property<int>("ItemUicategory")
                        .HasColumnName("ItemUICategory");

                    b.Property<byte>("LevelEquip");

                    b.Property<short>("LevelItem");

                    b.Property<byte>("MateriaSlotCount");

                    b.Property<byte>("MaterializeType");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Plural")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("PriceLow");

                    b.Property<int>("PriceMid");

                    b.Property<byte>("Rarity");

                    b.Property<short>("Salvage");

                    b.Property<string>("Singular")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("StackSize");

                    b.Property<int>("Stain");

                    b.Property<bool>("StartsWithVowel");

                    b.HasKey("Id");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("AetherCurrents.Database.Entities.JournalCategory", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("JournalSectionId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("JournalCategory");
                });

            modelBuilder.Entity("AetherCurrents.Database.Entities.JournalGenre", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<byte>("JournalCategory");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("JournalGenre");
                });

            modelBuilder.Entity("AetherCurrents.Database.Entities.JournalSection", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("JournalSection");
                });

            modelBuilder.Entity("AetherCurrents.Database.Entities.Map", b =>
                {
                    b.Property<int>("Id");

                    b.Property<bool>("DiscoveryArrayByte");

                    b.Property<short>("DiscoveryIndex");

                    b.Property<byte>("Hierarchy");

                    b.Property<string>("MapId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<short>("MapMarkerRange");

                    b.Property<string>("MediumMap")
                        .IsRequired()
                        .HasMaxLength(35);

                    b.Property<short>("OffsetX");

                    b.Property<short>("OffsetY");

                    b.Property<short>("PlaceName");

                    b.Property<short>("PlaceNameRegion");

                    b.Property<short>("PlaceNameSub");

                    b.Property<short>("SizeFactor");

                    b.Property<string>("SmallMap")
                        .IsRequired()
                        .HasMaxLength(35);

                    b.Property<short>("TerritoryType");

                    b.HasKey("Id");

                    b.ToTable("Map");
                });

            modelBuilder.Entity("AetherCurrents.Database.Entities.Orchestrion", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(205)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Orchestrion");
                });

            modelBuilder.Entity("AetherCurrents.Database.Entities.OrchestrionCategory", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("OrchestrionCategory");
                });

            modelBuilder.Entity("AetherCurrents.Database.Entities.OrchestrionPath", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("OrchestrionPath");
                });

            modelBuilder.Entity("AetherCurrents.Database.Entities.OrchestrionUiparam", b =>
                {
                    b.Property<int>("Id");

                    b.Property<byte>("Category");

                    b.Property<int>("PositionInCategory");

                    b.HasKey("Id");

                    b.ToTable("OrchestrionUiparam");
                });

            modelBuilder.Entity("AetherCurrents.Database.Entities.PlaceName", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("NameNoArticle")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("PlaceName");
                });

            modelBuilder.Entity("AetherCurrents.Database.Entities.Quest", b =>
                {
                    b.Property<int>("Id");

                    b.Property<byte>("BeastReputationRank");

                    b.Property<byte>("BeastTribe");

                    b.Property<short>("BellEnd");

                    b.Property<short>("BellStart");

                    b.Property<short>("ClassJobCategoryComplete");

                    b.Property<short>("ClassJobCategoryUnlock");

                    b.Property<int>("ClassJobLevelComplete");

                    b.Property<int>("ClassJobLevelUnlock");

                    b.Property<byte>("ClassJobRequired");

                    b.Property<byte>("ClassJobUnlock");

                    b.Property<int>("EnpcResidentEnd")
                        .HasColumnName("ENpcResidentEnd");

                    b.Property<int>("EnpcResidentStart")
                        .HasColumnName("ENpcResidentStart");

                    b.Property<short>("EventIconType");

                    b.Property<int>("ExpFactor");

                    b.Property<byte>("Expansion");

                    b.Property<int>("GilReward");

                    b.Property<byte>("GrandCompany");

                    b.Property<byte>("GrandCompanyRank");

                    b.Property<short>("GrandCompanySeals");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<string>("IconSpecial")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<byte>("InstanceContentJoin");

                    b.Property<int>("InstanceContentUnlock");

                    b.Property<bool>("IsHouseRequired");

                    b.Property<bool>("IsRepeatable");

                    b.Property<byte>("ItemRewardType");

                    b.Property<short>("JournalGenre");

                    b.Property<int?>("MountRequired");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<short?>("PlaceName");

                    b.Property<byte>("PreviousQuestJoin");

                    b.Property<string>("QuestId")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<byte>("QuestLevelOffset");

                    b.Property<byte>("QuestLockJoin");

                    b.Property<byte>("QuestStatus")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<byte>("RepeatIntervalType");

                    b.Property<byte>("ReputationReward");

                    b.Property<short>("SortKey");

                    b.Property<byte>("TomestoneReward");

                    b.Property<byte>("TomestoneRewardCount");

                    b.HasKey("Id");

                    b.ToTable("Quest");
                });

            modelBuilder.Entity("AetherCurrents.Database.Entities.QuestDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DetailDescription")
                        .IsUnicode(false);

                    b.Property<string>("DetailKey")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("QuestTextId")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("SheetFullName")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("QuestDetail");
                });

            modelBuilder.Entity("AetherCurrents.Database.Entities.SpearfishingEcology", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("IntensifyDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("NearbyDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("ShadowsDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("ShapeDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("SpearfishingEcology");
                });

            modelBuilder.Entity("AetherCurrents.Database.Entities.SpearfishingItem", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<short>("GatheringItemLevel");

                    b.Property<bool>("IsVisible");

                    b.Property<int>("Item");

                    b.Property<short>("TerritoryType");

                    b.HasKey("Id");

                    b.ToTable("SpearfishingItem");
                });

            modelBuilder.Entity("AetherCurrents.Database.Entities.SpearfishingNotebook", b =>
                {
                    b.Property<int>("Id");

                    b.Property<byte>("GatheringLevel");

                    b.Property<short>("GatheringPointBase");

                    b.Property<short>("PlaceName");

                    b.Property<short>("Radius");

                    b.Property<int>("TerritoryType");

                    b.Property<short>("X");

                    b.Property<short>("Y");

                    b.HasKey("Id");

                    b.ToTable("SpearfishingNotebook");
                });

            modelBuilder.Entity("AetherCurrents.Database.Entities.TerritoryType", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("Aetheryte");

                    b.Property<int>("ArrayEventHandler");

                    b.Property<string>("Bg")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<short>("Map");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<short>("PlaceName");

                    b.Property<short>("PlaceNameRegion");

                    b.Property<short>("PlaceNameZone");

                    b.Property<byte>("TerritoryIntendedUse");

                    b.Property<byte>("WeatherRate");

                    b.HasKey("Id");

                    b.ToTable("TerritoryType");
                });

            modelBuilder.Entity("AetherCurrents.Database.Entities.TripleTriadCard", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<bool>("StartsWithVowel");

                    b.HasKey("Id");

                    b.ToTable("TripleTriadCard");
                });

            modelBuilder.Entity("AetherCurrents.Database.Entities.TripleTriadCardRarity", b =>
                {
                    b.Property<int>("Id");

                    b.Property<byte>("Stars");

                    b.HasKey("Id");

                    b.ToTable("TripleTriadCardRarity");
                });

            modelBuilder.Entity("AetherCurrents.Database.Entities.TripleTriadCardResident", b =>
                {
                    b.Property<int>("Id");

                    b.Property<byte>("Bottom");

                    b.Property<byte>("Left");

                    b.Property<byte>("Rarity");

                    b.Property<byte>("Right");

                    b.Property<int>("SaleValue");

                    b.Property<byte>("SortKey");

                    b.Property<byte>("Top");

                    b.Property<byte>("Type");

                    b.HasKey("Id");

                    b.ToTable("TripleTriadCardResident");
                });

            modelBuilder.Entity("AetherCurrents.Database.Entities.TripleTriadCardType", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("TripleTriadCardType");
                });

            modelBuilder.Entity("AetherCurrents.Database.Entities.TripleTriadCompetition", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("TripleTriadCompetition");
                });

            modelBuilder.Entity("AetherCurrents.Database.Entities.TripleTriadRule", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("TripleTriadRule");
                });

            modelBuilder.Entity("AetherCurrents.Database.Entities.FishingSpotItem", b =>
                {
                    b.HasOne("AetherCurrents.Database.Entities.FishingSpot", "FishingSpot")
                        .WithMany("FishingSpotItem")
                        .HasForeignKey("FishingSpotId")
                        .HasConstraintName("FK_FishingSpot")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
